jdk1.8新特性知识点：
1. Lambda表达式
面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以什么形式做。lambda表达式本质上是一段匿名内部类.
Lmabda表达式的语法总结： () -> ();

口诀：左右遇一省括号，左侧推断类型省
注：当一个接口中存在多个抽象方法时，如果使用lambda表达式，并不能智能匹配对应的抽象方法，因此引入了函数式接口的概念
2. 函数式接口
函数式接口的提出是为了给Lambda表达式的使用提供更好的支持。
只定义了一个抽象方法的接口（Object类的public方法除外），就是函数式接口，并且还提供了注解：@FunctionalInterface
常见的四大函数式接口
● Consumer 《T》：消费型接口，有参无返回值
● Supplier 《T》：供给型接口，无参有返回值
● Function 《T,R》：:函数式接口，有参有返回值
      在四大核心函数式接口基础上，还提供了诸如BiFunction、BinaryOperation、toIntFunction等扩展的函数式接口，都是在这四种函数式接口上扩展而来的，不做赘述。
总结：函数式接口的提出是为了让我们更加方便的使用lambda表达式，不需要自己再手动创建一个函数式接口，直接拿来用就好了
3. 方法引用和构造器调用
若lambda体中的内容有方法已经实现了，那么可以使用“方法引用” ,也可以理解为方法引用是lambda表达式的另外一种表现形式并且其语法比lambda表达式更加简单
(a) 方法引用 
三种表现形式： 
                1.  对象：：实例方法名 
                2.  类：：静态方法名 
                3.  类：：实例方法名 （lambda参数列表中第一个参数是实例方法的调用  者，第二个参数是实例方法的参数时可用）
(b)构造器引用 
格式：ClassName::new
(c)数组引用
格式：Type[]::new
4. Stream API
Stream操作的三个步骤
● 创建stream
● 中间操作（过滤、map）
● 终止操作
凡是返回值仍然为Stream 接口的为函数拼接方法，它们支持链式调用；而返回值不再为Stream 接口的为终结方法，不再支持链式调用。

5. 接口中的默认方法和静态方法
   接口中可以定义默认实现方法和静态方法
6. 新时间日期API
新的日期API  java.time.      LocalDate |  LocalTime  |  LocalDateTime
新的日期API都是不可变的，更使用于多线程的使用环境中；
 * 之前使用的java.util.Date月份从0开始，我们一般会+1使用，很不方便，java.time.LocalDate月份和星期都改成了enum
 * java.util.Date和SimpleDateFormat都不是线程安全的，而LocalDate和LocalTime和最基本的String一样，是不变类型，不但线程安全，而且不能修改。
 * java.util.Date是一个“万能接口”，它包含日期、时间，还有毫秒数，更加明确需求取舍
 * 新接口更好用的原因是考虑到了日期时间的操作，经常发生往前推或往后推几天的情况。用java.util.Date配合Calendar要写好多代码，而且一般的开发人员还不一定能写对。
