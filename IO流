流：流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象，本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。
1、IO的分类有哪些？
按流向分为输入流和输出流
 按类型分为字节流和字符流

2、字节流和字符流的区别？
字节流：处理除文字之外的数据（图片、视频），无缓冲区，每传一次数据就会打开一次文件
字符流：处理文字和字符的数据，有缓存区，使用缓冲区打开文件次数少
字符流和字节流的使用非常相似，但是实际上字节流的操作不会经过缓冲区（内存）而是直接操作文本本身的，而字符流的操作会先经过缓冲区（内存）然后通过缓冲区再操作文件。
3. 什么是缓冲区？有什么作用？
1. 缓冲区就是一段特殊的内存区域，很多情况下当程序需要频繁地操作一个资源（如文件或数据库）则性能会很低，所以为了提升性能就可以将一部分数据暂时读写到缓存区，以后直接从此区域中读写数据即可，这样就显著提升了性。
2. 对于 Java 字符流的操作都是在缓冲区操作的，所以如果我们想在字符流操作中主动将缓冲区刷新到文件则可以使用 flush() 方法操作。
4. 什么是Java序列化，如何实现Java序列化？
1. 序列化就是一种用来处理对象流的机制，将对象的内容进行流化。可以对流化后的对象进行读写操作，可以将流化后的对象传输于网络之间，也可以写入磁盘。序列化是为了解决在对象流读写操作时所引发的问题
2. 序列化的实现：将需要被序列化的类实现Serialize接口，没有需要实现的方法，此接口只是为了标注对象可被序列化的，然后使用一个输出流（如：FileOutputStream）来构造一个ObjectOutputStream(对象流)对象，再使用ObjectOutputStream对象的write(Object  obj)方法就可以将参数obj的对象写出
5、IO类型有哪些？
（1）阻塞式IO （BIO）
 （2）非阻塞式IO
 （3）IO复用   (NIO)
 （4）信号驱动IO
 （5）异步IO  (AIO)
6、流需不需要关闭？什么时候关闭？
（1）流一旦打开就必须要关闭，使用close方法
 （2）多个流互相调用关闭最外层的流
 （3）放在finally语句中，finally一定会执行
