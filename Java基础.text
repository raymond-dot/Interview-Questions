Java 面向对象编程三大特性：封装 继承 多态
封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式
继承：就是子类继承父类的属性和行为，子类可以直接访问父类中的非私有的属性和行为。可以通过getter/setter方法访问父类的私有成员变量。
构造器不能被继承，因此不能被重写，但可以被重载。
 
多态：Java实现多态有三个必要条件：继承、重写、向上转型。
重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？
方法的重载和重写都是实现多态的方式，区别在于重载实现的是编译时的多态性，而重写实现的是运行时的多态性。
重载：发生在同一个类中，方法名相同参数列表不同（参数类型不同、个数不同、顺序不同），与方法返回值和访问修饰符无关，即重载的方法不能根据返回类型进行区分
重写：发生在父子类中，方法名、参数列表必须相同，返回值小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类（里氏代换原则）；如果父类方法访问修饰符为private则子类中就不是重写。
向上转型：父类引用指向一个子类对象

 
抽象类和接口
类是对事物的抽象，抽象类是对类的抽象，接口是对抽象类的抽象。
抽象类：抽象方法：没有方法体的方法。 抽象类：包含抽象方法的类。
1. abstract修饰的方法是抽象方法，修饰的类是抽象类。
2. 抽象类不能创建对象，只能创建其非抽象子类的对象；
3. 抽象类不一定有抽象方法，但是有抽象方法的类一定是抽象类。
4. 抽象类中，可以有构造器，是供子类创建对象时，初始化父类成员使用的。
5. 抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类；
 
接口：接口的内部主要就是封装了方法，包含抽象方法（JDK 7及以前），默认方法和静态方法（JDK 8）。

1. 接口使用interface修饰；
2. 接口不能被实例化；
3. 一个类能继承一个父类，同时实现多个接口；一个接口能继承另一个或者多个接口；
非抽象子类实现接口：
1.必须重写接口中所有抽象方法。
2.继承了接口的默认方法，即可以直接调用，也可以重写。
抽象类和接口的对比
抽象类是用来捕捉子类的通用特性的。接口是抽象方法的集合。
从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。

基本数据类型、引用类型在内存中的存储方式
     基本数据类型：存放在栈内存中。用完就消失。
     引用类型：在栈内存中存放引用堆内存的地址，在堆内存中存储类、对象、数组等。当没用引用指向堆内存中的类、对象、数组时，由 GC回收机制不定期自动清理。

Java 中只有 值传递，没有引用传递；
 深拷贝和浅拷贝区别是什么？
● 浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝（例：assign()）
● 深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变，这就是深拷贝（例：JSON.parse()和JSON.stringify()，但是此方法无法复制函数类型）
String和StringBuffer、StringBuilder的区别是什么？
可变性
String类中使用字符数组保存字符串，private　final　char　value[]，所以string对象是不可变的。StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，char[] value，这两种对象都是可变的。
线程安全性
String中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder是StringBuilder与StringBuffer的公共父类，定义了一些字符串的基本操作，如expandCapacity、append、insert、indexOf等公共方法。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。
性能
每次对String 类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String 对象。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用StirngBuilder 相比使用StringBuffer 仅能获得10%~15% 左右的性能提升，但却要冒多线程不安全的风险。
对于三者使用的总结
如果要操作少量的数据用 = String
单线程操作字符串缓冲区 下操作大量数据 = StringBuilder
多线程操作字符串缓冲区 下操作大量数据 = StringBuffer
