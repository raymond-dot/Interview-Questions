什么是Jalor
Jalor 是轻量级 Cloud Native 微服务开发框架，支持 Spring Cloud 原生应用，致力于提高 Web 应用产品实施的质量与效率。 通过提供基础且实用的功能(例如菜单导航、用户管理、权限（认证、鉴权等）、
Excel 导入导出等)、API 及解决方案减轻项目组的实施压力。 通过框架推广组件，规范项目实施及方案使用，使规范能真正落地。

由下图可以看出，Jalor 框架已经集成了 Spring Boot、Spring Cloud、Jalor 组件、Jalor 规范、统一 Console 和服务治理的能力。

Jalor 主要包含如下功能：
服务安全
提供鉴权、认证、黑白名单等能力保障服务的访问安全
1、认证：主要有 sso、jwt、sgov、内部 token 等认证方式。
2、鉴权：框架自研的基于 aop 拦截的鉴权方式。
3、黑白名单：在数据字典中配置域名进行拦截的认证方式。

基础服务
框架基础服务主要包含角色权限、栏目、Lookup、富文本、国际化、个性化、数据字典等内容，这些基础服务被抽出统一放到公共服务中，由公共服务统一管理。
这样可以解决各应用独自维护难度问题。公共服务还提供服务缓存、运维工具、服务元数据信息、卡片配置和 OData 模型管理

服务治理

负载均衡
软件负载均衡有服务器端负载均衡和客户端负载均衡;
1）服务器端负载均衡:
例如 Nginx，通过 Nginx 进行负载均衡，先发送请求，然后通过负载均衡算法，在多个服务器之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。
2）客户端负载均衡：

容错
当微服务访问目标服务时，容错场景
1）目标服务不可达（网络异常、链接拒绝等）
2）对用户指定的服务器返回异常状态码进行容错重试。
系统容错机制：尝试采取重试和更换目标主机地址等方式，保证服务可以。

客户端熔断
熔断场景一：当微服务访问目标请求链接长时间没有响应时，系统主动断开链接，主要是防止因服务故障或网络延迟导致请求堆积，占用服务器资源。
熔断场景二：当大量并发访问目标服务，超过目标服务的处理能力导致服务不稳定，出现访问失败的情形。达到熔断阈值时，主动拒绝请求直接返回访问失败，来达到保护目标系统的目的，例如 12306 抢票。
jalor 6 客户端熔断是基于 Netflix Hystrix 和 USF(统一服务框架) 客户端调用链实现的

它作为调用链的一个处理环节, 即熔断处理器 CircuitBreakerHandler 实现了 IHandler 接口。

服务组件
1、配置组件：拉通多种配置源（文件、配置中心、Apollo 等），统一 Jalor 配置。
2、安全组件：支持多种认证方式（SSO、JWT），独立出了 jalor-login 和 jalor-permssion 子组件。
3、存储组件：抽象了存储接口，提供了基于 HS2、S3 和本地文件系统的存储实现。
4、上传下载组件：对上传和下载的共性进行了抽象，提供了上传、下载的开箱即用支持。
5、邮件组件：提供了邮件发送接口，支持邮件内容的模板化。
6、多租户组件：业务服务侧可以按需决定是否支持多租户特性。
7、Excel 组件：提供了基于 Excel 的数据导入和导出功能，用户仅需简单定义 Excel 元数据。
8、EDM 组件：与 EDM（企业文档管理）服务进行了深度集成，简化用户使用 EDM 服务。
9、审计组件：提供了基于 AOP 的审计组件，满足 IT 和业务的合规性要求。
10、服务注册与发现：基于 Eureka 提供了服务注册和发现组件，可独立选用。

组件化架构

Jalor 提供了如下场景基座，供项目组按需选取，项目组根据自己的需求选择合适的基座 demo 在本地搭建。

服务场景
基于 jalor-starter-core、jalor-starter-crud、 jalor-starter-monolithic、jalor-starter-biz 实现渐进式开发，开发者根据业务诉求按需选择基座聚焦业务代码开发。
jalor-starter-core （ Jalor 基本组件基座）
Jalor 最小内核，是 Jalor 的核心抽象，包括：VO 基类、异常处理机制、异步抽象、上下文管理等 Jalor 的核心能力。

从上图可以看出该基座没有集成最左边列的能力，即该基座不能开发接口，不能操作数据库等，项目组可以使用这个基座集成自己想要的能力，比如 ORM 不用 mybatis，可以集成 Hibernate 等其他的 ORM 能力。

jalor-starter-crud （本地增删改查基座）
本地开发模式，提供 CXF 访问协议和 Mybatis 持久化能力，能使业务聚焦本地服务开发。

该基座没有集成认证、鉴权服务注册等能力，其使用场景是提供给开发人员快速开发服务用的，即开发人员不需要关心认证，
鉴权等配置和其他繁琐的步骤就可以开发 Restful 接口和对数据库做增删改查的操作，聚焦自己的业务服务开发。


服务开发完成后，可以把该基座工程通过 Maven 依赖到微服务或者单体的应用中，从而形成一个完整的应用。

jalor-starter-monolithic （单体基座）
单体服务模式，提供类似 Jalor5 单体服务，具备完整的集成和组件能力，实现前后端一体化配置开发。

从上图可以看出该基座除了没有集成服务注册与发现的能力外，其他的能力都集成了，说明它不是一个微服务的应用。


该基座是基于“单体优先”设计，ALL in ONE,组件间强耦合，难以按需选用。所有的组件比如 EDM、Excel 等不管有没有用到都集成进来了。

jalor-starter-biz （业务微服务基座）
微服务模式，提供服务注册、发现和路由能力，实现业务微服务架构。

如果项目组需要使用微服务框架的就可以选择该基座，该基座满足微服务开发场景：轻、快，组件（功能）按需选用。


该基座主要集成了 Spring Boot 和 Spring Cloud 的能力，并且在此基础上集成了 Jalor 提供的业务基础服务，如：数据字典、栏目服务、国际化、权限服务等。


该基座主要提供给项目组开发自己的业务服务，开发过程中如下有需要用到其他组件比如 Excel，可以通过 Maven 把 Excel 组件的依赖加入就可以使用 Excel 的功能，积木式开发，实现服务开发部署的轻量化。

jalor-starter-cs （ Jalor 公共服务基座）
微服务模式，Jalor 公共服务，集成了 Jalor 基础管理能力，包括用户，角色，权限，栏目，国际化，数据字典，缓存管理等等。

该基座跟 jalor-starter-biz 基座一样，都是微服务模式的基座，其主要功能是提供一个管理界面给管理员配置管理 Jalor 的基础能力，如：用户，角色，权限等。


该基座不需要做业务服务的开发，是框架提供给项目组配置管理使用的，比如要添加数据字典，或者给用户分配权限等都可以在此配置管理。


jalor-starter-biz 基座依赖于该基座，需要把 jalor-starter-biz 和 jalor-starter-cs 一起在本地搭建使用，
一般情况 jalor-starter-cs 基座只需搭建一套部署到线上环境中，供多个 jalor-starter-biz 使用。
