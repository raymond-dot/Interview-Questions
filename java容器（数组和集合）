  时间复杂度：
  一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数f(n)，进而分析f(n)随n的变化情况并确定T(n)的数量级。这里用"O"来表示数量级，给出算法的时间复杂度。
                     T(n)=O(f(n));
  它表示随着问题规模的n的增大，算法的执行时间的增长率和f(n)的增长率相同，这称作算法的渐进时间复杂度，简称时间复杂度。而我们一般讨论的是最坏时间复杂度，
  这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的上界，分析最坏的情况以估算算法指向时间的一个上界。

常见数据结构的查找、插入、删除时间复杂度
(访问是指随机访问)
由上图可见，平衡二叉树的查找，插入和删除性能都是O(logN)，其中查找和删除性能较好；
                        哈希表的查找、插入和删除性能都是O(1)，都是最好的。

常用数据结构：
1.   #堆栈(Stack)：先进后出，压栈和弹栈，访问、插入和删除元素只能在栈顶进行
2.   #队列(Queue)：先进先出，元素只能从队列尾插入，从队列头访问和删除。
3.   #数组(Array)：数组连续内存空间，查找速度快，增删需要创建新数组效率慢
4.   #链表(Linked):存储空间是不连续的，首尾存储上下一个节点的信息，所以寻址麻烦，查找速度慢，但是增删快
5.   #哈希表(Hash):哈希表综合了它们两个的优点，一个哈希表，由数组和链表组成。
6.   #二叉树(Tree):每个节点最多有两个子树的树结构，数组和链表的折中方式
集合和数组的区别
● 数组是固定长度的；集合可变长度的。
● 数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。
● 数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。

常用的集合类有哪些？

Java 容器分为 Collection 和 Map 两大类，Collection集合的子接口有Set、List、Queue三种子接口
Collection集合主要有List和Set两大接口
● List：一个存取有序容器，元素可以重复，可以插入多个null元素，元素都有索引。 常用的实现类有 ArrayList、LinkedList 和 Vector。
● Set：一个存取无需容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。 常用实现类是 HashSet、LinkedHashSet 以及 TreeSet。
Map是一个键值对集合，存储键、值和之间的映射。 Key无序，唯一；value 不要求有序，允许重复。Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。
Map 的常用实现类：HashMap、TreeMap、HashTable、LinkedHashMap、ConcurrentHashMap.

集合框架底层数据结构
Collection（单列集合）
1. List(存取有序)
● Arraylist： Object数组
● Vector： Object数组
● LinkedList： 双向链表（1.6之前为双向循环链表，1.7取消了循环）
2. Set
● HashSet（无序，唯一）：HashSet 是基于 HashMap 实现的，HashSet的值存放于HashMap的key上，HashMap的value统一为PRESENT。
● LinkedHashSet(存取有序, 唯一)： LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的。
● TreeSet（自然排序, 唯一）： 红黑树(自平衡的排序二叉树。)
Map（双列集合）
● HashMap：  JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）；JDK1.8以后由数组+链表+红黑树.
● LinkedHashMap：数组+链表+红黑树+双向链表。
● HashTable： 数组+链表。
● TreeMap： 红黑树（自平衡的排序二叉树）。
遍历一个 List 有哪些不同的方式？每种方法的实现原理是什么？Java 中 List 遍历的最佳实践是什么？
遍历方式有以下几种：
1. for 循环遍历，基于计数器。在集合外部维护一个计数器，然后依次读取每一个位置的元素，当读取到最后一个元素后停止。
2. 迭代器遍历，Iterator。Iterator 是面向对象的一个设计模式，目的是屏蔽不同数据集合的特点，统一遍历集合的接口。Java 在 Collections 中支持了 Iterator 模式。
3. foreach（增强for循环） 循环遍历。foreach 内部也是采用了 Iterator 的方式实现，使用时不需要显式声明 Iterator 或计数器。优点是代码简洁，不易出错；缺点是只能做简单的遍历，
不能在遍历过程中操作数据集合，例如删除、替换。
最佳实践：Java Collections 框架中提供了一个 RandomAccess 接口，用来标记 List 实现是否支持 Random Access。
● 如果一个数据集合实现了该接口，就意味着它支持 Random Access，按位置读取元素的平均时间复杂度为 O(1)，如ArrayList。
● 如果没有实现该接口，表示不支持 Random Access，如LinkedList。
● Collection是所有单列集合的根接口，如果要对单列集合进行遍历，通用的遍历方式是迭代器遍历或增强for遍历。
推荐的做法就是，支持 Random Access 的列表可用 for 循环遍历，否则建议用 Iterator 或 foreach 遍历。

ArrayList 的扩容机制
1. ArrayList 默认初始容量为10;   
2. 扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。

ArrayList 和 LinkedList 的区别是什么？
● 数据结构实现：ArrayList 是动态数组的数据结构实现，而 LinkedList 是双向链表的数据结构实现。
● 随机访问效率：ArrayList 比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。
● 增加和删除效率：在非首尾的增加和删除操作，LinkedList 要比 ArrayList 效率要高，因为 ArrayList 增删操作要影响数组内的其他数据的下标。
● 内存空间占用：LinkedList 比 ArrayList 更占内存，因为 LinkedList 的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。
● 线程安全：ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；
综合来说，在需要频繁读取集合中的元素时，更推荐使用 ArrayList，而在插入和删除操作较多时，更推荐使用 LinkedList。
补充：数据结构基础之双向链表
双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。

多线程场景下如何使用 ArrayList？
ArrayList 不是线程安全的，如果遇到多线程场景，可以通过 Collections 的 synchronizedList 方法将其转换成线程安全的容器后再使用。

jdk 7 与 jdk 8 中关于HashMap的对比:
8时红黑树+链表+数组的形式，当桶内元素大于8时，便会树化
1.7 table在创建hashmap时分配空间，而1.8在put的时候分配，如果table为空，则为table分配空间。
在发生冲突，插入链中时，7是头插法，8是尾插法。
说一下 HashMap 的实现原理？
底层使用数组+链表。当链表长度8，会将链表转为红黑树，用以优化查询效率。当链表长度小于6，会将红黑树转为链表.
hashMap

HashMap、HashMapConcurrentHashMap的区别
HashMap ：先说HashMap，HashMap是线程不安全的，在并发环境下，可能会形成环状链表（扩容时可能造成，具体原因自行百度google或查看源码分析），导致get操作时，cpu空转，
所以，在并发环境中使用HashMap是非常危险的。
HashMap ： HashTable和HashMap的实现原理几乎一样，差别无非是1.HashTable不允许key和value为null；2.HashTable是线程安全的。但是HashTable线程安全的策略实现代价却太大了，
简单粗暴，get/put所有相关操作都是synchronized的，这相当于给整个哈希表加了一把大锁，多线程访问时候，只要有一个线程访问或操作该对象，那其他线程只能阻塞，相当于将所有的操作串行化，
在竞争激烈的并发场景中性能就会非常差。
　HashTable性能差主要是由于所有操作需要竞争同一把锁，而如果容器中有多把锁，每一把锁锁一段数据，这样在多线程访问时不同段的数据时，就不会存在锁竞争了，这样便可以有效地提高并发效率。
 这就是ConcurrentHashMap所采用的"分段锁"思想。


HashTable性能差主要是由于所有操作需要竞争同一把锁，而如果容器中有多把锁，每一把锁锁一段数据，这样在多线程访问时不同段的数据时，就不会存在锁竞争了，这样便可以有效地提高并发效率。
这就是ConcurrentHashMap所采用的"分段锁"思想。

JDK8的ConcurrentHashMap与JDK7的区别
在JDK1.8中对于ConcurrentHashMap也进行了升级，主要优化点如下：
1）JDK7中使用CAS+Reentrant保证并发更新的安全，而在JDK8是通过CAS+synchronized保证。因为
synchronized拥有了优化，在低粒度加锁下，synchronized并不比Reentrant差；在大量数据操作下，对于JVM的
内存压力，基于API的ReentrantLock会开销更多的内存。
2）JDK7的底层使用segment+数组+链表组成。而在JDK8中抛弃了segment，转而使用数组+链表+红黑树的形式
实现，从而让锁的粒度能够更细，进一步减少并发冲突的概率；同时也提高的数据查询效率。
3）在JDK7中的HashEntry在JDK8中变为Node，当转化为红黑树后，变为TreeNode。转换的规则与hashMap相
同，当链表长度大于等于8则转换为红黑树，当红黑树的深度小于等于6则转换为链表。


